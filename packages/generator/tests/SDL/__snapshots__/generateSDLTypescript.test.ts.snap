// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate SDL Typescript Should back with resolvers types 1`] = `
"import * as Client from '@prisma/client'

import { Context } from './context'

import { GraphQLResolveInfo } from 'graphql'

import { GetAggregateResult } from '@prisma/client/runtime/library'

type Resolver<T extends {}, A extends {}, R extends any> = (
  parent: T,
  args: A,
  context: Context,
  info: GraphQLResolveInfo,
) => Promise<R>

type NoExpand<T> = T extends unknown ? T : never

type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
    ?
        | (K extends keyof O ? { [P in K]: O[P] } & O : O)
        | ({ [P in keyof O as P extends K ? K : never]-?: O[P] } & O)
    : never
>

export type Resolvers = {
  [key: string]: { [key: string]: Resolver<any, any, any> }
} & {
  User?: User
  Post?: Post
  CreateManyUserAndReturnOutputType?: CreateManyUserAndReturnOutputType
  CreateManyPostAndReturnOutputType?: CreateManyPostAndReturnOutputType
  Query?: Query
  Mutation?: Mutation
  AggregateUser?: AggregateUser
  UserGroupByOutputType?: UserGroupByOutputType
  AggregatePost?: AggregatePost
  PostGroupByOutputType?: PostGroupByOutputType
  AffectedRowsOutput?: AffectedRowsOutput
  UserCountOutputType?: UserCountOutputType
  UserCountAggregateOutputType?: UserCountAggregateOutputType
  UserAvgAggregateOutputType?: UserAvgAggregateOutputType
  UserSumAggregateOutputType?: UserSumAggregateOutputType
  UserMinAggregateOutputType?: UserMinAggregateOutputType
  UserMaxAggregateOutputType?: UserMaxAggregateOutputType
  PostCountAggregateOutputType?: PostCountAggregateOutputType
  PostAvgAggregateOutputType?: PostAvgAggregateOutputType
  PostSumAggregateOutputType?: PostSumAggregateOutputType
  PostMinAggregateOutputType?: PostMinAggregateOutputType
  PostMaxAggregateOutputType?: PostMaxAggregateOutputType
}

export type User = { [key: string]: Resolver<any, any, any> } & {
  id?: Resolver<Client.User, {}, number>
  createdAt?: Resolver<Client.User, {}, Date>
  email?: Resolver<Client.User, {}, string>
  name?: Resolver<Client.User, {}, string | null>
  password?: Resolver<Client.User, {}, string>
  permissions?: Resolver<Client.User, {}, any>
  posts?: Resolver<Client.User, UserPostsArgs, Client.Post[] | null>
  _count?: Resolver<Client.User, {}, Client.Prisma.UserCountOutputType>
}

export type Post = { [key: string]: Resolver<any, any, any> } & {
  id?: Resolver<Client.Post, {}, number>
  published?: Resolver<Client.Post, {}, boolean>
  title?: Resolver<Client.Post, {}, string>
  authorId?: Resolver<Client.Post, {}, number | null>
  createdAt?: Resolver<Client.Post, {}, Date>
  updatedAt?: Resolver<Client.Post, {}, Date>
  author?: Resolver<Client.Post, PostAuthorArgs, Client.User | null>
}

export type CreateManyUserAndReturnOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<
    ReturnType<Client.Prisma.UserDelegate['createManyAndReturn']>,
    {},
    number
  >
  createdAt?: Resolver<
    ReturnType<Client.Prisma.UserDelegate['createManyAndReturn']>,
    {},
    Date
  >
  email?: Resolver<
    ReturnType<Client.Prisma.UserDelegate['createManyAndReturn']>,
    {},
    string
  >
  name?: Resolver<
    ReturnType<Client.Prisma.UserDelegate['createManyAndReturn']>,
    {},
    string | null
  >
  password?: Resolver<
    ReturnType<Client.Prisma.UserDelegate['createManyAndReturn']>,
    {},
    string
  >
  permissions?: Resolver<
    ReturnType<Client.Prisma.UserDelegate['createManyAndReturn']>,
    {},
    any
  >
}

export type CreateManyPostAndReturnOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<
    ReturnType<Client.Prisma.PostDelegate['createManyAndReturn']>,
    {},
    number
  >
  published?: Resolver<
    ReturnType<Client.Prisma.PostDelegate['createManyAndReturn']>,
    {},
    boolean
  >
  title?: Resolver<
    ReturnType<Client.Prisma.PostDelegate['createManyAndReturn']>,
    {},
    string
  >
  authorId?: Resolver<
    ReturnType<Client.Prisma.PostDelegate['createManyAndReturn']>,
    {},
    number | null
  >
  createdAt?: Resolver<
    ReturnType<Client.Prisma.PostDelegate['createManyAndReturn']>,
    {},
    Date
  >
  updatedAt?: Resolver<
    ReturnType<Client.Prisma.PostDelegate['createManyAndReturn']>,
    {},
    Date
  >
  author?: Resolver<
    ReturnType<Client.Prisma.PostDelegate['createManyAndReturn']>,
    CreateManyPostAndReturnOutputTypeAuthorArgs,
    Client.User | null
  >
}

export type Query = { [key: string]: Resolver<any, any, any> } & {
  findFirstUser?: Resolver<{}, FindFirstUserArgs, Client.User | null>
  findFirstUserOrThrow?: Resolver<
    {},
    FindFirstUserOrThrowArgs,
    Client.User | null
  >
  findManyUser?: Resolver<{}, FindManyUserArgs, Client.User[]>
  findManyUserCount?: Resolver<{}, FindManyUserArgs, number>
  aggregateUser?: Resolver<
    {},
    AggregateUserArgs,
    GetAggregateResult<Client.Prisma.$UserPayload, AggregateUserArgs>
  >
  groupByUser?: Resolver<
    {},
    GroupByUserArgs,
    Client.Prisma.UserGroupByOutputType[]
  >
  findUniqueUser?: Resolver<{}, FindUniqueUserArgs, Client.User | null>
  findUniqueUserOrThrow?: Resolver<
    {},
    FindUniqueUserOrThrowArgs,
    Client.User | null
  >
  findFirstPost?: Resolver<{}, FindFirstPostArgs, Client.Post | null>
  findFirstPostOrThrow?: Resolver<
    {},
    FindFirstPostOrThrowArgs,
    Client.Post | null
  >
  findManyPost?: Resolver<{}, FindManyPostArgs, Client.Post[]>
  findManyPostCount?: Resolver<{}, FindManyPostArgs, number>
  aggregatePost?: Resolver<
    {},
    AggregatePostArgs,
    GetAggregateResult<Client.Prisma.$PostPayload, AggregatePostArgs>
  >
  groupByPost?: Resolver<
    {},
    GroupByPostArgs,
    Client.Prisma.PostGroupByOutputType[]
  >
  findUniquePost?: Resolver<{}, FindUniquePostArgs, Client.Post | null>
  findUniquePostOrThrow?: Resolver<
    {},
    FindUniquePostOrThrowArgs,
    Client.Post | null
  >
}

export type Mutation = { [key: string]: Resolver<any, any, any> } & {
  createOneUser?: Resolver<{}, CreateOneUserArgs, Client.User>
  upsertOneUser?: Resolver<{}, UpsertOneUserArgs, Client.User>
  createManyUser?: Resolver<{}, CreateManyUserArgs, Client.Prisma.BatchPayload>
  createManyUserAndReturn?: Resolver<
    {},
    CreateManyUserAndReturnArgs,
    ReturnType<Client.Prisma.UserDelegate['createManyAndReturn']>
  >
  deleteOneUser?: Resolver<{}, DeleteOneUserArgs, Client.User | null>
  updateOneUser?: Resolver<{}, UpdateOneUserArgs, Client.User | null>
  updateManyUser?: Resolver<{}, UpdateManyUserArgs, Client.Prisma.BatchPayload>
  deleteManyUser?: Resolver<{}, DeleteManyUserArgs, Client.Prisma.BatchPayload>
  createOnePost?: Resolver<{}, CreateOnePostArgs, Client.Post>
  upsertOnePost?: Resolver<{}, UpsertOnePostArgs, Client.Post>
  createManyPost?: Resolver<{}, CreateManyPostArgs, Client.Prisma.BatchPayload>
  createManyPostAndReturn?: Resolver<
    {},
    CreateManyPostAndReturnArgs,
    ReturnType<Client.Prisma.PostDelegate['createManyAndReturn']>
  >
  deleteOnePost?: Resolver<{}, DeleteOnePostArgs, Client.Post | null>
  updateOnePost?: Resolver<{}, UpdateOnePostArgs, Client.Post | null>
  updateManyPost?: Resolver<{}, UpdateManyPostArgs, Client.Prisma.BatchPayload>
  deleteManyPost?: Resolver<{}, DeleteManyPostArgs, Client.Prisma.BatchPayload>
  executeRaw?: Resolver<{}, ExecuteRawArgs, any>
  queryRaw?: Resolver<{}, QueryRawArgs, any>
}

export type AggregateUser = { [key: string]: Resolver<any, any, any> } & {
  _count?: Resolver<
    Client.Prisma.AggregateUser,
    {},
    Client.Prisma.UserCountAggregateOutputType | null
  >
  _avg?: Resolver<
    Client.Prisma.AggregateUser,
    {},
    Client.Prisma.UserAvgAggregateOutputType | null
  >
  _sum?: Resolver<
    Client.Prisma.AggregateUser,
    {},
    Client.Prisma.UserSumAggregateOutputType | null
  >
  _min?: Resolver<
    Client.Prisma.AggregateUser,
    {},
    Client.Prisma.UserMinAggregateOutputType | null
  >
  _max?: Resolver<
    Client.Prisma.AggregateUser,
    {},
    Client.Prisma.UserMaxAggregateOutputType | null
  >
}

export type UserGroupByOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.UserGroupByOutputType, {}, number>
  createdAt?: Resolver<Client.Prisma.UserGroupByOutputType, {}, Date>
  email?: Resolver<Client.Prisma.UserGroupByOutputType, {}, string>
  name?: Resolver<Client.Prisma.UserGroupByOutputType, {}, string | null>
  password?: Resolver<Client.Prisma.UserGroupByOutputType, {}, string>
  permissions?: Resolver<Client.Prisma.UserGroupByOutputType, {}, any>
  _count?: Resolver<
    Client.Prisma.UserGroupByOutputType,
    {},
    Client.Prisma.UserCountAggregateOutputType | null
  >
  _avg?: Resolver<
    Client.Prisma.UserGroupByOutputType,
    {},
    Client.Prisma.UserAvgAggregateOutputType | null
  >
  _sum?: Resolver<
    Client.Prisma.UserGroupByOutputType,
    {},
    Client.Prisma.UserSumAggregateOutputType | null
  >
  _min?: Resolver<
    Client.Prisma.UserGroupByOutputType,
    {},
    Client.Prisma.UserMinAggregateOutputType | null
  >
  _max?: Resolver<
    Client.Prisma.UserGroupByOutputType,
    {},
    Client.Prisma.UserMaxAggregateOutputType | null
  >
}

export type AggregatePost = { [key: string]: Resolver<any, any, any> } & {
  _count?: Resolver<
    Client.Prisma.AggregatePost,
    {},
    Client.Prisma.PostCountAggregateOutputType | null
  >
  _avg?: Resolver<
    Client.Prisma.AggregatePost,
    {},
    Client.Prisma.PostAvgAggregateOutputType | null
  >
  _sum?: Resolver<
    Client.Prisma.AggregatePost,
    {},
    Client.Prisma.PostSumAggregateOutputType | null
  >
  _min?: Resolver<
    Client.Prisma.AggregatePost,
    {},
    Client.Prisma.PostMinAggregateOutputType | null
  >
  _max?: Resolver<
    Client.Prisma.AggregatePost,
    {},
    Client.Prisma.PostMaxAggregateOutputType | null
  >
}

export type PostGroupByOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.PostGroupByOutputType, {}, number>
  published?: Resolver<Client.Prisma.PostGroupByOutputType, {}, boolean>
  title?: Resolver<Client.Prisma.PostGroupByOutputType, {}, string>
  authorId?: Resolver<Client.Prisma.PostGroupByOutputType, {}, number | null>
  createdAt?: Resolver<Client.Prisma.PostGroupByOutputType, {}, Date>
  updatedAt?: Resolver<Client.Prisma.PostGroupByOutputType, {}, Date>
  _count?: Resolver<
    Client.Prisma.PostGroupByOutputType,
    {},
    Client.Prisma.PostCountAggregateOutputType | null
  >
  _avg?: Resolver<
    Client.Prisma.PostGroupByOutputType,
    {},
    Client.Prisma.PostAvgAggregateOutputType | null
  >
  _sum?: Resolver<
    Client.Prisma.PostGroupByOutputType,
    {},
    Client.Prisma.PostSumAggregateOutputType | null
  >
  _min?: Resolver<
    Client.Prisma.PostGroupByOutputType,
    {},
    Client.Prisma.PostMinAggregateOutputType | null
  >
  _max?: Resolver<
    Client.Prisma.PostGroupByOutputType,
    {},
    Client.Prisma.PostMaxAggregateOutputType | null
  >
}

export type AffectedRowsOutput = { [key: string]: Resolver<any, any, any> } & {
  count?: Resolver<Client.Prisma.BatchPayload, {}, number>
}

export type UserCountOutputType = { [key: string]: Resolver<any, any, any> } & {
  posts?: Resolver<
    Client.Prisma.UserCountOutputType,
    UserCountOutputTypePostsArgs,
    number
  >
}

export type UserCountAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.UserCountAggregateOutputType, {}, number>
  createdAt?: Resolver<Client.Prisma.UserCountAggregateOutputType, {}, number>
  email?: Resolver<Client.Prisma.UserCountAggregateOutputType, {}, number>
  name?: Resolver<Client.Prisma.UserCountAggregateOutputType, {}, number>
  password?: Resolver<Client.Prisma.UserCountAggregateOutputType, {}, number>
  permissions?: Resolver<Client.Prisma.UserCountAggregateOutputType, {}, number>
  _all?: Resolver<Client.Prisma.UserCountAggregateOutputType, {}, number>
}

export type UserAvgAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.UserAvgAggregateOutputType, {}, number | null>
}

export type UserSumAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.UserSumAggregateOutputType, {}, number | null>
}

export type UserMinAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.UserMinAggregateOutputType, {}, number | null>
  createdAt?: Resolver<
    Client.Prisma.UserMinAggregateOutputType,
    {},
    Date | null
  >
  email?: Resolver<Client.Prisma.UserMinAggregateOutputType, {}, string | null>
  name?: Resolver<Client.Prisma.UserMinAggregateOutputType, {}, string | null>
  password?: Resolver<
    Client.Prisma.UserMinAggregateOutputType,
    {},
    string | null
  >
}

export type UserMaxAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.UserMaxAggregateOutputType, {}, number | null>
  createdAt?: Resolver<
    Client.Prisma.UserMaxAggregateOutputType,
    {},
    Date | null
  >
  email?: Resolver<Client.Prisma.UserMaxAggregateOutputType, {}, string | null>
  name?: Resolver<Client.Prisma.UserMaxAggregateOutputType, {}, string | null>
  password?: Resolver<
    Client.Prisma.UserMaxAggregateOutputType,
    {},
    string | null
  >
}

export type PostCountAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.PostCountAggregateOutputType, {}, number>
  published?: Resolver<Client.Prisma.PostCountAggregateOutputType, {}, number>
  title?: Resolver<Client.Prisma.PostCountAggregateOutputType, {}, number>
  authorId?: Resolver<Client.Prisma.PostCountAggregateOutputType, {}, number>
  createdAt?: Resolver<Client.Prisma.PostCountAggregateOutputType, {}, number>
  updatedAt?: Resolver<Client.Prisma.PostCountAggregateOutputType, {}, number>
  _all?: Resolver<Client.Prisma.PostCountAggregateOutputType, {}, number>
}

export type PostAvgAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.PostAvgAggregateOutputType, {}, number | null>
  authorId?: Resolver<
    Client.Prisma.PostAvgAggregateOutputType,
    {},
    number | null
  >
}

export type PostSumAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.PostSumAggregateOutputType, {}, number | null>
  authorId?: Resolver<
    Client.Prisma.PostSumAggregateOutputType,
    {},
    number | null
  >
}

export type PostMinAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.PostMinAggregateOutputType, {}, number | null>
  published?: Resolver<
    Client.Prisma.PostMinAggregateOutputType,
    {},
    boolean | null
  >
  title?: Resolver<Client.Prisma.PostMinAggregateOutputType, {}, string | null>
  authorId?: Resolver<
    Client.Prisma.PostMinAggregateOutputType,
    {},
    number | null
  >
  createdAt?: Resolver<
    Client.Prisma.PostMinAggregateOutputType,
    {},
    Date | null
  >
  updatedAt?: Resolver<
    Client.Prisma.PostMinAggregateOutputType,
    {},
    Date | null
  >
}

export type PostMaxAggregateOutputType = {
  [key: string]: Resolver<any, any, any>
} & {
  id?: Resolver<Client.Prisma.PostMaxAggregateOutputType, {}, number | null>
  published?: Resolver<
    Client.Prisma.PostMaxAggregateOutputType,
    {},
    boolean | null
  >
  title?: Resolver<Client.Prisma.PostMaxAggregateOutputType, {}, string | null>
  authorId?: Resolver<
    Client.Prisma.PostMaxAggregateOutputType,
    {},
    number | null
  >
  createdAt?: Resolver<
    Client.Prisma.PostMaxAggregateOutputType,
    {},
    Date | null
  >
  updatedAt?: Resolver<
    Client.Prisma.PostMaxAggregateOutputType,
    {},
    Date | null
  >
}

export type UserPostsArgs = {
  where?: PostWhereInput
  orderBy?: PostOrderByWithRelationInput[]
  cursor?: PostWhereUniqueInput
  take?: number
  skip?: number
  distinct?: PostScalarFieldEnum[]
}

export type PostAuthorArgs = {
  where?: UserWhereInput
}

export type CreateManyPostAndReturnOutputTypeAuthorArgs = {
  where?: UserWhereInput
}

export type FindFirstUserArgs = {
  where?: UserWhereInput
  orderBy?: UserOrderByWithRelationInput[]
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: UserScalarFieldEnum[]
}

export type FindFirstUserOrThrowArgs = {
  where?: UserWhereInput
  orderBy?: UserOrderByWithRelationInput[]
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: UserScalarFieldEnum[]
}

export type FindManyUserArgs = {
  where?: UserWhereInput
  orderBy?: UserOrderByWithRelationInput[]
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: UserScalarFieldEnum[]
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: UserOrderByWithRelationInput[]
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  _count?: Client.Prisma.UserCountAggregateInputType
  _avg?: Client.Prisma.UserAvgAggregateInputType
  _sum?: Client.Prisma.UserSumAggregateInputType
  _min?: Client.Prisma.UserMinAggregateInputType
  _max?: Client.Prisma.UserMaxAggregateInputType
}

export type GroupByUserArgs = {
  where?: UserWhereInput
  orderBy?: UserOrderByWithAggregationInput[]
  by: UserScalarFieldEnum[]
  having?: UserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
}

export type FindUniqueUserArgs = {
  where: UserWhereUniqueInput
}

export type FindUniqueUserOrThrowArgs = {
  where: UserWhereUniqueInput
}

export type FindFirstPostArgs = {
  where?: PostWhereInput
  orderBy?: PostOrderByWithRelationInput[]
  cursor?: PostWhereUniqueInput
  take?: number
  skip?: number
  distinct?: PostScalarFieldEnum[]
}

export type FindFirstPostOrThrowArgs = {
  where?: PostWhereInput
  orderBy?: PostOrderByWithRelationInput[]
  cursor?: PostWhereUniqueInput
  take?: number
  skip?: number
  distinct?: PostScalarFieldEnum[]
}

export type FindManyPostArgs = {
  where?: PostWhereInput
  orderBy?: PostOrderByWithRelationInput[]
  cursor?: PostWhereUniqueInput
  take?: number
  skip?: number
  distinct?: PostScalarFieldEnum[]
}

export type AggregatePostArgs = {
  where?: PostWhereInput
  orderBy?: PostOrderByWithRelationInput[]
  cursor?: PostWhereUniqueInput
  take?: number
  skip?: number
  _count?: Client.Prisma.PostCountAggregateInputType
  _avg?: Client.Prisma.PostAvgAggregateInputType
  _sum?: Client.Prisma.PostSumAggregateInputType
  _min?: Client.Prisma.PostMinAggregateInputType
  _max?: Client.Prisma.PostMaxAggregateInputType
}

export type GroupByPostArgs = {
  where?: PostWhereInput
  orderBy?: PostOrderByWithAggregationInput[]
  by: PostScalarFieldEnum[]
  having?: PostScalarWhereWithAggregatesInput
  take?: number
  skip?: number
}

export type FindUniquePostArgs = {
  where: PostWhereUniqueInput
}

export type FindUniquePostOrThrowArgs = {
  where: PostWhereUniqueInput
}

export type CreateOneUserArgs = {
  data: UserCreateInput
}

export type UpsertOneUserArgs = {
  where: UserWhereUniqueInput
  create: UserCreateInput
  update: UserUpdateInput
}

export type CreateManyUserArgs = {
  data: UserCreateManyInput[]
  skipDuplicates?: boolean
}

export type CreateManyUserAndReturnArgs = {
  data: UserCreateManyInput[]
  skipDuplicates?: boolean
}

export type DeleteOneUserArgs = {
  where: UserWhereUniqueInput
}

export type UpdateOneUserArgs = {
  data: UserUpdateInput
  where: UserWhereUniqueInput
}

export type UpdateManyUserArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}

export type DeleteManyUserArgs = {
  where?: UserWhereInput
}

export type CreateOnePostArgs = {
  data: PostCreateInput
}

export type UpsertOnePostArgs = {
  where: PostWhereUniqueInput
  create: PostCreateInput
  update: PostUpdateInput
}

export type CreateManyPostArgs = {
  data: PostCreateManyInput[]
  skipDuplicates?: boolean
}

export type CreateManyPostAndReturnArgs = {
  data: PostCreateManyInput[]
  skipDuplicates?: boolean
}

export type DeleteOnePostArgs = {
  where: PostWhereUniqueInput
}

export type UpdateOnePostArgs = {
  data: PostUpdateInput
  where: PostWhereUniqueInput
}

export type UpdateManyPostArgs = {
  data: PostUpdateManyMutationInput
  where?: PostWhereInput
}

export type DeleteManyPostArgs = {
  where?: PostWhereInput
}

export type ExecuteRawArgs = {
  query: string
  parameters?: any
}

export type QueryRawArgs = {
  query: string
  parameters?: any
}

export type UserCountOutputTypePostsArgs = {
  where?: PostWhereInput
}

export type UserWhereInput = {
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
  id?: IntFilter
  createdAt?: DateTimeFilter
  email?: StringFilter
  name?: StringNullableFilter | null
  password?: StringFilter
  permissions?: JsonFilter
  posts?: PostListRelationFilter
}

export type UserOrderByWithRelationInput = {
  id?: SortOrder
  createdAt?: SortOrder
  email?: SortOrder
  name?: SortOrderInput
  password?: SortOrder
  permissions?: SortOrder
  posts?: PostOrderByRelationAggregateInput
}

export type UserWhereUniqueInput = AtLeast<
  {
    id?: number
    email?: string
    AND?: UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput[]
    createdAt?: DateTimeFilter
    name?: StringNullableFilter | null
    password?: StringFilter
    permissions?: JsonFilter
    posts?: PostListRelationFilter
  },
  'id' | 'email'
>

export type UserOrderByWithAggregationInput = {
  id?: SortOrder
  createdAt?: SortOrder
  email?: SortOrder
  name?: SortOrderInput
  password?: SortOrder
  permissions?: SortOrder
  _count?: UserCountOrderByAggregateInput
  _avg?: UserAvgOrderByAggregateInput
  _max?: UserMaxOrderByAggregateInput
  _min?: UserMinOrderByAggregateInput
  _sum?: UserSumOrderByAggregateInput
}

export type UserScalarWhereWithAggregatesInput = {
  AND?: UserScalarWhereWithAggregatesInput[]
  OR?: UserScalarWhereWithAggregatesInput[]
  NOT?: UserScalarWhereWithAggregatesInput[]
  id?: IntWithAggregatesFilter
  createdAt?: DateTimeWithAggregatesFilter
  email?: StringWithAggregatesFilter
  name?: StringNullableWithAggregatesFilter | null
  password?: StringWithAggregatesFilter
  permissions?: JsonWithAggregatesFilter
}

export type PostWhereInput = {
  AND?: PostWhereInput[]
  OR?: PostWhereInput[]
  NOT?: PostWhereInput[]
  id?: IntFilter
  published?: BoolFilter
  title?: StringFilter
  authorId?: IntNullableFilter | null
  createdAt?: DateTimeFilter
  updatedAt?: DateTimeFilter
  author?: UserNullableScalarRelationFilter | null
}

export type PostOrderByWithRelationInput = {
  id?: SortOrder
  published?: SortOrder
  title?: SortOrder
  authorId?: SortOrderInput
  createdAt?: SortOrder
  updatedAt?: SortOrder
  author?: UserOrderByWithRelationInput
}

export type PostWhereUniqueInput = AtLeast<
  {
    id?: number
    AND?: PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput[]
    published?: BoolFilter
    title?: StringFilter
    authorId?: IntNullableFilter | null
    createdAt?: DateTimeFilter
    updatedAt?: DateTimeFilter
    author?: UserNullableScalarRelationFilter | null
  },
  'id'
>

export type PostOrderByWithAggregationInput = {
  id?: SortOrder
  published?: SortOrder
  title?: SortOrder
  authorId?: SortOrderInput
  createdAt?: SortOrder
  updatedAt?: SortOrder
  _count?: PostCountOrderByAggregateInput
  _avg?: PostAvgOrderByAggregateInput
  _max?: PostMaxOrderByAggregateInput
  _min?: PostMinOrderByAggregateInput
  _sum?: PostSumOrderByAggregateInput
}

export type PostScalarWhereWithAggregatesInput = {
  AND?: PostScalarWhereWithAggregatesInput[]
  OR?: PostScalarWhereWithAggregatesInput[]
  NOT?: PostScalarWhereWithAggregatesInput[]
  id?: IntWithAggregatesFilter
  published?: BoolWithAggregatesFilter
  title?: StringWithAggregatesFilter
  authorId?: IntNullableWithAggregatesFilter | null
  createdAt?: DateTimeWithAggregatesFilter
  updatedAt?: DateTimeWithAggregatesFilter
}

export type UserCreateInput = {
  createdAt?: Date
  email: string
  name?: string | null
  password: string
  permissions?: any
  posts?: PostCreateNestedManyWithoutAuthorInput
}

export type UserUncheckedCreateInput = {
  id?: number
  createdAt?: Date
  email: string
  name?: string | null
  password: string
  permissions?: any
  posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
}

export type UserUpdateInput = {
  createdAt?: DateTimeFieldUpdateOperationsInput
  email?: StringFieldUpdateOperationsInput
  name?: NullableStringFieldUpdateOperationsInput | null
  password?: StringFieldUpdateOperationsInput
  permissions?: any
  posts?: PostUpdateManyWithoutAuthorNestedInput
}

export type UserUncheckedUpdateInput = {
  id?: IntFieldUpdateOperationsInput
  createdAt?: DateTimeFieldUpdateOperationsInput
  email?: StringFieldUpdateOperationsInput
  name?: NullableStringFieldUpdateOperationsInput | null
  password?: StringFieldUpdateOperationsInput
  permissions?: any
  posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
}

export type UserCreateManyInput = {
  id?: number
  createdAt?: Date
  email: string
  name?: string | null
  password: string
  permissions?: any
}

export type UserUpdateManyMutationInput = {
  createdAt?: DateTimeFieldUpdateOperationsInput
  email?: StringFieldUpdateOperationsInput
  name?: NullableStringFieldUpdateOperationsInput | null
  password?: StringFieldUpdateOperationsInput
  permissions?: any
}

export type UserUncheckedUpdateManyInput = {
  id?: IntFieldUpdateOperationsInput
  createdAt?: DateTimeFieldUpdateOperationsInput
  email?: StringFieldUpdateOperationsInput
  name?: NullableStringFieldUpdateOperationsInput | null
  password?: StringFieldUpdateOperationsInput
  permissions?: any
}

export type PostCreateInput = {
  published?: boolean
  title: string
  createdAt?: Date
  updatedAt?: Date
  author?: UserCreateNestedOneWithoutPostsInput
}

export type PostUncheckedCreateInput = {
  id?: number
  published?: boolean
  title: string
  authorId?: number | null
  createdAt?: Date
  updatedAt?: Date
}

export type PostUpdateInput = {
  published?: BoolFieldUpdateOperationsInput
  title?: StringFieldUpdateOperationsInput
  createdAt?: DateTimeFieldUpdateOperationsInput
  updatedAt?: DateTimeFieldUpdateOperationsInput
  author?: UserUpdateOneWithoutPostsNestedInput
}

export type PostUncheckedUpdateInput = {
  id?: IntFieldUpdateOperationsInput
  published?: BoolFieldUpdateOperationsInput
  title?: StringFieldUpdateOperationsInput
  authorId?: NullableIntFieldUpdateOperationsInput | null
  createdAt?: DateTimeFieldUpdateOperationsInput
  updatedAt?: DateTimeFieldUpdateOperationsInput
}

export type PostCreateManyInput = {
  id?: number
  published?: boolean
  title: string
  authorId?: number | null
  createdAt?: Date
  updatedAt?: Date
}

export type PostUpdateManyMutationInput = {
  published?: BoolFieldUpdateOperationsInput
  title?: StringFieldUpdateOperationsInput
  createdAt?: DateTimeFieldUpdateOperationsInput
  updatedAt?: DateTimeFieldUpdateOperationsInput
}

export type PostUncheckedUpdateManyInput = {
  id?: IntFieldUpdateOperationsInput
  published?: BoolFieldUpdateOperationsInput
  title?: StringFieldUpdateOperationsInput
  authorId?: NullableIntFieldUpdateOperationsInput | null
  createdAt?: DateTimeFieldUpdateOperationsInput
  updatedAt?: DateTimeFieldUpdateOperationsInput
}

export type IntFilter = {
  equals?: number
  in?: number[]
  notIn?: number[]
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntFilter
}

export type DateTimeFilter = {
  equals?: Date
  in?: Date[]
  notIn?: Date[]
  lt?: Date
  lte?: Date
  gt?: Date
  gte?: Date
  not?: NestedDateTimeFilter
}

export type StringFilter = {
  equals?: string
  in?: string[]
  notIn?: string[]
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: NestedStringFilter
}

export type StringNullableFilter = {
  equals?: string | null
  in?: string[] | null
  notIn?: string[] | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: NestedStringNullableFilter | null
}

export type JsonFilter = {
  equals?: any
  path?: string[]
  string_contains?: string
  string_starts_with?: string
  string_ends_with?: string
  array_contains?: any | null
  array_starts_with?: any | null
  array_ends_with?: any | null
  lt?: any
  lte?: any
  gt?: any
  gte?: any
  not?: any
}

export type PostListRelationFilter = {
  every?: PostWhereInput
  some?: PostWhereInput
  none?: PostWhereInput
}

export type SortOrderInput = {
  sort: SortOrder
  nulls?: NullsOrder
}

export type PostOrderByRelationAggregateInput = {
  _count?: SortOrder
}

export type UserCountOrderByAggregateInput = {
  id?: SortOrder
  createdAt?: SortOrder
  email?: SortOrder
  name?: SortOrder
  password?: SortOrder
  permissions?: SortOrder
}

export type UserAvgOrderByAggregateInput = {
  id?: SortOrder
}

export type UserMaxOrderByAggregateInput = {
  id?: SortOrder
  createdAt?: SortOrder
  email?: SortOrder
  name?: SortOrder
  password?: SortOrder
}

export type UserMinOrderByAggregateInput = {
  id?: SortOrder
  createdAt?: SortOrder
  email?: SortOrder
  name?: SortOrder
  password?: SortOrder
}

export type UserSumOrderByAggregateInput = {
  id?: SortOrder
}

export type IntWithAggregatesFilter = {
  equals?: number
  in?: number[]
  notIn?: number[]
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntWithAggregatesFilter
  _count?: NestedIntFilter
  _avg?: NestedFloatFilter
  _sum?: NestedIntFilter
  _min?: NestedIntFilter
  _max?: NestedIntFilter
}

export type DateTimeWithAggregatesFilter = {
  equals?: Date
  in?: Date[]
  notIn?: Date[]
  lt?: Date
  lte?: Date
  gt?: Date
  gte?: Date
  not?: NestedDateTimeWithAggregatesFilter
  _count?: NestedIntFilter
  _min?: NestedDateTimeFilter
  _max?: NestedDateTimeFilter
}

export type StringWithAggregatesFilter = {
  equals?: string
  in?: string[]
  notIn?: string[]
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: NestedStringWithAggregatesFilter
  _count?: NestedIntFilter
  _min?: NestedStringFilter
  _max?: NestedStringFilter
}

export type StringNullableWithAggregatesFilter = {
  equals?: string | null
  in?: string[] | null
  notIn?: string[] | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  mode?: QueryMode
  not?: NestedStringNullableWithAggregatesFilter | null
  _count?: NestedIntNullableFilter
  _min?: NestedStringNullableFilter
  _max?: NestedStringNullableFilter
}

export type JsonWithAggregatesFilter = {
  equals?: any
  path?: string[]
  string_contains?: string
  string_starts_with?: string
  string_ends_with?: string
  array_contains?: any | null
  array_starts_with?: any | null
  array_ends_with?: any | null
  lt?: any
  lte?: any
  gt?: any
  gte?: any
  not?: any
  _count?: NestedIntFilter
  _min?: NestedJsonFilter
  _max?: NestedJsonFilter
}

export type BoolFilter = {
  equals?: boolean
  not?: NestedBoolFilter
}

export type IntNullableFilter = {
  equals?: number | null
  in?: number[] | null
  notIn?: number[] | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntNullableFilter | null
}

export type UserNullableScalarRelationFilter = {
  is?: UserWhereInput | null
  isNot?: UserWhereInput | null
}

export type PostCountOrderByAggregateInput = {
  id?: SortOrder
  published?: SortOrder
  title?: SortOrder
  authorId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type PostAvgOrderByAggregateInput = {
  id?: SortOrder
  authorId?: SortOrder
}

export type PostMaxOrderByAggregateInput = {
  id?: SortOrder
  published?: SortOrder
  title?: SortOrder
  authorId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type PostMinOrderByAggregateInput = {
  id?: SortOrder
  published?: SortOrder
  title?: SortOrder
  authorId?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
}

export type PostSumOrderByAggregateInput = {
  id?: SortOrder
  authorId?: SortOrder
}

export type BoolWithAggregatesFilter = {
  equals?: boolean
  not?: NestedBoolWithAggregatesFilter
  _count?: NestedIntFilter
  _min?: NestedBoolFilter
  _max?: NestedBoolFilter
}

export type IntNullableWithAggregatesFilter = {
  equals?: number | null
  in?: number[] | null
  notIn?: number[] | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntNullableWithAggregatesFilter | null
  _count?: NestedIntNullableFilter
  _avg?: NestedFloatNullableFilter
  _sum?: NestedIntNullableFilter
  _min?: NestedIntNullableFilter
  _max?: NestedIntNullableFilter
}

export type PostCreateNestedManyWithoutAuthorInput = {
  create?: PostCreateWithoutAuthorInput[]
  connectOrCreate?: PostCreateOrConnectWithoutAuthorInput[]
  createMany?: PostCreateManyAuthorInputEnvelope
  connect?: PostWhereUniqueInput[]
}

export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
  create?: PostCreateWithoutAuthorInput[]
  connectOrCreate?: PostCreateOrConnectWithoutAuthorInput[]
  createMany?: PostCreateManyAuthorInputEnvelope
  connect?: PostWhereUniqueInput[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type PostUpdateManyWithoutAuthorNestedInput = {
  create?: PostCreateWithoutAuthorInput[]
  connectOrCreate?: PostCreateOrConnectWithoutAuthorInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: PostCreateManyAuthorInputEnvelope
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: PostUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: PostScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type PostUncheckedUpdateManyWithoutAuthorNestedInput = {
  create?: PostCreateWithoutAuthorInput[]
  connectOrCreate?: PostCreateOrConnectWithoutAuthorInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: PostCreateManyAuthorInputEnvelope
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: PostUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: PostScalarWhereInput[]
}

export type UserCreateNestedOneWithoutPostsInput = {
  create?: UserCreateWithoutPostsInput
  connectOrCreate?: UserCreateOrConnectWithoutPostsInput
  connect?: UserWhereUniqueInput
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type UserUpdateOneWithoutPostsNestedInput = {
  create?: UserCreateWithoutPostsInput
  connectOrCreate?: UserCreateOrConnectWithoutPostsInput
  upsert?: UserUpsertWithoutPostsInput
  disconnect?: UserWhereInput
  delete?: UserWhereInput
  connect?: UserWhereUniqueInput
  update?: UserUpdateToOneWithWhereWithoutPostsInput
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NestedIntFilter = {
  equals?: number
  in?: number[]
  notIn?: number[]
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntFilter
}

export type NestedDateTimeFilter = {
  equals?: Date
  in?: Date[]
  notIn?: Date[]
  lt?: Date
  lte?: Date
  gt?: Date
  gte?: Date
  not?: NestedDateTimeFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: string[]
  notIn?: string[]
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringFilter
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: string[] | null
  notIn?: string[] | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringNullableFilter | null
}

export type NestedIntWithAggregatesFilter = {
  equals?: number
  in?: number[]
  notIn?: number[]
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntWithAggregatesFilter
  _count?: NestedIntFilter
  _avg?: NestedFloatFilter
  _sum?: NestedIntFilter
  _min?: NestedIntFilter
  _max?: NestedIntFilter
}

export type NestedFloatFilter = {
  equals?: number
  in?: number[]
  notIn?: number[]
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedFloatFilter
}

export type NestedDateTimeWithAggregatesFilter = {
  equals?: Date
  in?: Date[]
  notIn?: Date[]
  lt?: Date
  lte?: Date
  gt?: Date
  gte?: Date
  not?: NestedDateTimeWithAggregatesFilter
  _count?: NestedIntFilter
  _min?: NestedDateTimeFilter
  _max?: NestedDateTimeFilter
}

export type NestedStringWithAggregatesFilter = {
  equals?: string
  in?: string[]
  notIn?: string[]
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringWithAggregatesFilter
  _count?: NestedIntFilter
  _min?: NestedStringFilter
  _max?: NestedStringFilter
}

export type NestedStringNullableWithAggregatesFilter = {
  equals?: string | null
  in?: string[] | null
  notIn?: string[] | null
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringNullableWithAggregatesFilter | null
  _count?: NestedIntNullableFilter
  _min?: NestedStringNullableFilter
  _max?: NestedStringNullableFilter
}

export type NestedIntNullableFilter = {
  equals?: number | null
  in?: number[] | null
  notIn?: number[] | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntNullableFilter | null
}

export type NestedJsonFilter = {
  equals?: any
  path?: string[]
  string_contains?: string
  string_starts_with?: string
  string_ends_with?: string
  array_contains?: any | null
  array_starts_with?: any | null
  array_ends_with?: any | null
  lt?: any
  lte?: any
  gt?: any
  gte?: any
  not?: any
}

export type NestedBoolFilter = {
  equals?: boolean
  not?: NestedBoolFilter
}

export type NestedBoolWithAggregatesFilter = {
  equals?: boolean
  not?: NestedBoolWithAggregatesFilter
  _count?: NestedIntFilter
  _min?: NestedBoolFilter
  _max?: NestedBoolFilter
}

export type NestedIntNullableWithAggregatesFilter = {
  equals?: number | null
  in?: number[] | null
  notIn?: number[] | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntNullableWithAggregatesFilter | null
  _count?: NestedIntNullableFilter
  _avg?: NestedFloatNullableFilter
  _sum?: NestedIntNullableFilter
  _min?: NestedIntNullableFilter
  _max?: NestedIntNullableFilter
}

export type NestedFloatNullableFilter = {
  equals?: number | null
  in?: number[] | null
  notIn?: number[] | null
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedFloatNullableFilter | null
}

export type PostCreateWithoutAuthorInput = {
  published?: boolean
  title: string
  createdAt?: Date
  updatedAt?: Date
}

export type PostUncheckedCreateWithoutAuthorInput = {
  id?: number
  published?: boolean
  title: string
  createdAt?: Date
  updatedAt?: Date
}

export type PostCreateOrConnectWithoutAuthorInput = {
  where: PostWhereUniqueInput
  create: PostCreateWithoutAuthorInput
}

export type PostCreateManyAuthorInputEnvelope = {
  data: PostCreateManyAuthorInput[]
  skipDuplicates?: boolean
}

export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutAuthorInput
  create: PostCreateWithoutAuthorInput
}

export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutAuthorInput
}

export type PostUpdateManyWithWhereWithoutAuthorInput = {
  where: PostScalarWhereInput
  data: PostUpdateManyMutationInput
}

export type PostScalarWhereInput = {
  AND?: PostScalarWhereInput[]
  OR?: PostScalarWhereInput[]
  NOT?: PostScalarWhereInput[]
  id?: IntFilter
  published?: BoolFilter
  title?: StringFilter
  authorId?: IntNullableFilter | null
  createdAt?: DateTimeFilter
  updatedAt?: DateTimeFilter
}

export type UserCreateWithoutPostsInput = {
  createdAt?: Date
  email: string
  name?: string | null
  password: string
  permissions?: any
}

export type UserUncheckedCreateWithoutPostsInput = {
  id?: number
  createdAt?: Date
  email: string
  name?: string | null
  password: string
  permissions?: any
}

export type UserCreateOrConnectWithoutPostsInput = {
  where: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

export type UserUpsertWithoutPostsInput = {
  update: UserUpdateWithoutPostsInput
  create: UserCreateWithoutPostsInput
  where?: UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutPostsInput = {
  where?: UserWhereInput
  data: UserUpdateWithoutPostsInput
}

export type UserUpdateWithoutPostsInput = {
  createdAt?: DateTimeFieldUpdateOperationsInput
  email?: StringFieldUpdateOperationsInput
  name?: NullableStringFieldUpdateOperationsInput | null
  password?: StringFieldUpdateOperationsInput
  permissions?: any
}

export type UserUncheckedUpdateWithoutPostsInput = {
  id?: IntFieldUpdateOperationsInput
  createdAt?: DateTimeFieldUpdateOperationsInput
  email?: StringFieldUpdateOperationsInput
  name?: NullableStringFieldUpdateOperationsInput | null
  password?: StringFieldUpdateOperationsInput
  permissions?: any
}

export type PostCreateManyAuthorInput = {
  id?: number
  published?: boolean
  title: string
  createdAt?: Date
  updatedAt?: Date
}

export type PostUpdateWithoutAuthorInput = {
  published?: BoolFieldUpdateOperationsInput
  title?: StringFieldUpdateOperationsInput
  createdAt?: DateTimeFieldUpdateOperationsInput
  updatedAt?: DateTimeFieldUpdateOperationsInput
}

export type PostUncheckedUpdateWithoutAuthorInput = {
  id?: IntFieldUpdateOperationsInput
  published?: BoolFieldUpdateOperationsInput
  title?: StringFieldUpdateOperationsInput
  createdAt?: DateTimeFieldUpdateOperationsInput
  updatedAt?: DateTimeFieldUpdateOperationsInput
}

export type PostUncheckedUpdateManyWithoutAuthorInput = {
  id?: IntFieldUpdateOperationsInput
  published?: BoolFieldUpdateOperationsInput
  title?: StringFieldUpdateOperationsInput
  createdAt?: DateTimeFieldUpdateOperationsInput
  updatedAt?: DateTimeFieldUpdateOperationsInput
}

export enum TransactionIsolationLevel {
  ReadUncommitted = 'ReadUncommitted',
  ReadCommitted = 'ReadCommitted',
  RepeatableRead = 'RepeatableRead',
  Serializable = 'Serializable',
}
export enum UserScalarFieldEnum {
  id = 'id',
  createdAt = 'createdAt',
  email = 'email',
  name = 'name',
  password = 'password',
  permissions = 'permissions',
}
export enum PostScalarFieldEnum {
  id = 'id',
  published = 'published',
  title = 'title',
  authorId = 'authorId',
  createdAt = 'createdAt',
  updatedAt = 'updatedAt',
}
export enum SortOrder {
  asc = 'asc',
  desc = 'desc',
}
export enum JsonNullValueInput {
  JsonNull = 'JsonNull',
}
export enum QueryMode {
  default = 'default',
  insensitive = 'insensitive',
}
export enum JsonNullValueFilter {
  DbNull = 'DbNull',
  JsonNull = 'JsonNull',
  AnyNull = 'AnyNull',
}
export enum NullsOrder {
  first = 'first',
  last = 'last',
}
"
`;
